#include "../itsbloc.dnh"
#include "../sound.dnh"
#include "../prostg.dnh"
#include "../system/item/item_consts.dnh"

let NUM_STAGES = 6;

@Initialize {
	//StartScript(LoadScript("./" ~ stage ~ "/stg_back.dnh"));
	let l = length(scripts);
	ascent (i in 0 .. l) {
		let name = scripts[i];
		LoadScriptInThread(GetCurrentScriptDirectory ~ "../" ~ name);
	}
	restartBGMWithTitle(bgm);
	SetCommonData("Stage", atoi(stage));
	TStage;
}

@Event {}

@MainLoop {
	yield;
}

@Finalize {}

function TBossPre(config) {
	let dir = GetCurrentScriptDirectory;
	let path = dir ~ "boss.dnh";
	let idScript = LoadScriptInThread(path);
	SetCommonData("BossDNHParams", config);
	wait(60);
	StartScript(idScript);
	while (!IsCloseScript(idScript)) {
		yield;
	}
	wait(240);
}

function TBossPost {
	//stageBonus(atoi(stage));
	wait(240);
	setLastStage(getCharacter, getDifficulty, atoi(stage));
	CloseStgScene;
}

/*task showStageTitle(colors) {
	let stageNames = getStageNames(atoi(stage));
	stageTitle(stageNames[0], stageNames[1], stageNames[2],
		colors);
}*/

let diaColors = [
	[128, 255, 255],
	[255, 128, 128],
	[255, 255, 128]
];

// Fuck mkm's naming conventions
// actually, they're fine; I was just raised on Java

function TDialogue(data) {
	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);
	let width = GetStgFrameWidth;
	let height = GetStgFrameHeight;
	let top = GetStgFrameTop;
	let left = GetStgFrameLeft;
	toggleDialogue;
	let len = length(data);
	//let path = GetCurrentScriptDirectory ~ data[0][0];
	let path2 = GetCurrentScriptDirectory ~ "./../resource/cartouche.png";
	let enemyPortrait = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetVisible(enemyPortrait, false);
	Obj_SetRenderPriority(enemyPortrait, 0.81);
	let playerPortrait = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(playerPortrait, GetCurrentScriptDirectory ~ 
		"../ambient/portrait/c" ~
		IntToString(getCharacter / 2) ~ "_0.png");
	ObjSprite2D_SetSourceRect(playerPortrait, 0, 1, 511, 512);
	ObjSprite2D_SetDestRect(playerPortrait, 0, 68, 511, 579);
	Obj_SetRenderPriority(playerPortrait, 0.81);
	let cartouche = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetVertexCount(cartouche, 4);
	ObjPrim_SetPrimitiveType(cartouche, PRIMITIVE_TRIANGLEFAN);
	ascent (i in 0 .. 4) {
		ObjPrim_SetVertexPosition(cartouche, i,
			left + 16 + (width - 16) * (i >= 2),
			top + height - 16 - 64 * (i == 1 || i == 2), 0);
		ObjPrim_SetVertexColor(cartouche, i, 0, 0, 0);
		ObjPrim_SetVertexAlpha(cartouche, i, 90 - 15 * (i == 3));
	}
	Obj_SetRenderPriority(cartouche, 0.82);
	let dialogueText = ObjText_Create;
	ObjText_SetFontType(dialogueText, S("font.dialogue"));
	ObjText_SetFontSize(dialogueText, 16 * fontScale);
	ObjRender_SetX(dialogueText, left + 22);
	ObjText_SetMaxWidth(dialogueText, 340);
	ObjRender_SetY(dialogueText, top + height - 80);
	Obj_SetRenderPriority(dialogueText, 0.83);
	let intro = cta("");
	txt("charIntro");
	txh(36);
	txalign(420, ALIGNMENT_CENTER);
	txc(255, 192, 128);
	txb(0, 0, 0);
	txr(84);
	txp(180, 412);
	let title = cta("");
	txt("charDesc");
	txh(18);
	txalign(420, ALIGNMENT_CENTER);
	txc(255, 192, 128);
	txb(0, 0, 0);
	txr(84);
	txp(180, 380);
	let name = S("dialogue.un");
	ascent (i in 0 .. len) {
		let entry = data[i];
		WriteLog("entry " ~ ToString(entry));
		let type = SplitString(entry, " ")[0];
		let message = "";
		if (length(type) != length(entry)) {
			message = entry[length(type) + 1 .. length(entry)];
		}
		alternative (type)
		case ("ShowName") {
			ObjText_SetText(intro, S("boss.b" ~ message ~ ".name"));
			ObjText_SetText(title, S("boss.b" ~ message ~ ".title"));
			name = S("dialogue.b" ~ message);
			ObjRender_SetAlpha(intro, 255);
			ObjRender_SetAlpha(title, 255);
			task fadeOut {
				wait(180);
				descent (i in 0 .. 85) {
					ObjRender_SetAlpha(intro, 3 * i);
					ObjRender_SetAlpha(title, 3 * i);
					yield;
				}
			}
			fadeOut;
		}
		case ("ShowSprite") {
			Obj_SetVisible(enemyPortrait, true);
		}
		case ("HideSprite") {
			Obj_SetVisible(enemyPortrait, false);
		}
		case ("SetSprite") {
			let args = SplitString(message, " ");
			let path = GetCurrentScriptDirectory ~ "../ambient/portrait/b" ~
				args[0] ~ "_" ~ args[1] ~ ".png";
			ObjPrim_SetTexture(enemyPortrait, path);
			// TODO: set proper vertex coordinates
			ObjSprite2D_SetSourceRect(enemyPortrait, 0, 1, 511, 512);
			ObjSprite2D_SetDestRect(enemyPortrait, 288, 68, 799, 579);
		}
		case ("PlayBGM") {
			playBGMWithTitle(atoi(message));
		}
		case ("Fight") {
			Obj_SetVisible(playerPortrait, false);
			let eiv = Obj_IsVisible(enemyPortrait);
			Obj_SetVisible(enemyPortrait, false);
			Obj_SetVisible(cartouche, false);
			Obj_SetVisible(dialogueText, false);
			Obj_SetVisible(intro, false);
			Obj_SetVisible(title, false);
			let strs = SplitString(message, " ");
			let bossID = atoi(strs[0]);
			unlockCharacter(bossID);
			SetForbidPlayerShot(false);
			SetForbidPlayerSpell(false);
			TBossPre([bossID, atoi(strs[1]), atoi(strs[2]), atoi(strs[3]), atoi(strs[4])]);
			SetForbidPlayerShot(true);
			SetForbidPlayerSpell(true);
			Obj_SetVisible(playerPortrait, true);
			Obj_SetVisible(enemyPortrait, eiv);
			Obj_SetVisible(cartouche, true);
			Obj_SetVisible(dialogueText, true);
			Obj_SetVisible(intro, true);
			Obj_SetVisible(title, true);
		}
		others {
			let t = (type == "Boss") + 2 * (type == "Narrator");
			let c = diaColors[t];
			ObjText_SetFontColorTop(dialogueText, c[0], c[1], c[2]);
			ObjText_SetFontColorBottom(dialogueText, c[0], c[1], c[2]);
			let theName = [S("dialogue.c" ~ IntToString(getCharacter / 2)), name, ""][t];
			message = theName ~ "[r]" ~ message;
			ObjText_SetTextWW(dialogueText, message, 80);
			ObjRender_SetAlpha(playerPortrait, [128, 255][t == 0]);
			ObjRender_SetAlpha(enemyPortrait, [128, 255][t == 1]);
			//Obj_SetRenderPriority(enemyPortrait, [0.29, 0.31, 0.3][t]);
			while (GetVirtualKeyState(VK_SHOT) != KEY_PUSH
				&& GetVirtualKeyState(VK_USER1) == KEY_FREE) {yield;}
			wait(10);
		}
	}
	Obj_Delete(enemyPortrait);
	Obj_Delete(playerPortrait);
	Obj_Delete(cartouche);
	Obj_Delete(dialogueText);
	Obj_Delete(intro);
	Obj_Delete(title);
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	toggleDialogue;
	return 0;
}
/*
let textSizes = [16, 28, 16, 14];
let textCoords = [
	[48, 100],
	[32, 120],
	[-16, 160],
	[64, 200]
];
let alignments = [ALIGNMENT_LEFT, ALIGNMENT_CENTER, ALIGNMENT_RIGHT, ALIGNMENT_LEFT];

function lighter(x) {
	return 255 - (255 - x) / 2;
}

task stageTitle(name, location, flair, color) {
	let textObjects = [
		textOf("Stage " ~ [stage, "FINAL", "EX"][2 * (stage >= "11") + (stage == "10")]),
		textOf(name),
		textOf(location),
		textOf(flair)
	];
	let len = length(textObjects);
	ascent (i in 0 .. len) {
		let t = textObjects[i];
		ObjText_SetFontColorTop(t, color[0], color[1], color[2]);
		ObjText_SetFontColorBottom(t, lighter(color[0]), lighter(color[1]), lighter(color[2]));
		ObjText_SetFontBorderType(t, BORDER_FULL);
		ObjText_SetFontBorderWidth(t, 2);
		ObjText_SetFontBorderColor(t, 0, 0, 0);
		ObjText_SetFontSize(t, textSizes[i] * fontScale);
		ObjText_SetMaxWidth(t, 384);
		ObjText_SetHorizontalAlignment(t, alignments[i]);
		Obj_SetRenderPriority(t, 1);
		ObjRender_SetX(t, textCoords[i][0]);
		ObjRender_SetY(t, textCoords[i][1]);
		if (i == 1) {
			ObjText_SetFontType(t, hwFont);
		}
	}
	wait(200);
	descent (a in 0 .. 100) {
		ascent (i in 0 .. len) {
			ObjRender_SetAlpha(textObjects[i], truncate(a * 2.55));
			yield;
		}
	}
	ascent (i in 0 .. len) {
		Obj_Delete(textObjects[i]);
	}
}*/

#include "./enemy.dnh"

/*function ending(id) {
	let dir = GetCurrentScriptDirectory ~ "../resource/endings/";
	let bg = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(bg, dir ~ "bg.png");
	ObjSprite2D_SetSourceRect(bg, 0, 0, 640, 480);
	ObjSprite2D_SetDestRect(bg, 0, 0, 640, 480);
	Obj_SetRenderPriority(bg, 0.9);
	let img = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(img, dir ~ "e" ~ IntToString(id) ~ "_0.png");
	ObjSprite2D_SetSourceRect(img, 0, 0, 640, 480);
	ObjSprite2D_SetDestRect(img, 0, 0, 640, 480);
	Obj_SetRenderPriority(img, 0.91);
	let imgId = 0;
	let textObjs = [];
	let data = readEndings(id);
	let len = length(data);
	ascent (i in 0 .. len) {
		let entry = data[i];
		let istr = SplitString(entry[0], ",");
		if (istr[0] != "256") {
			let t = ObjText_Create;
			Obj_SetRenderPriority(t, 0.92);
			ObjRender_SetPosition(t, 20, 400 + 16 * length(textObjs), 0);
			ObjText_SetText(t, entry[1]);
			ObjText_SetFontType(t, typeface);
			ObjText_SetFontBorderType(t, BORDER_FULL);
			ObjText_SetFontColorTop(t, atoi(istr[0]), atoi(istr[1]), atoi(istr[2]));
			ObjText_SetFontColorBottom(t, atoi(istr[0]), atoi(istr[1]), atoi(istr[2]));
			textObjs = textObjs ~ [t];
			while (GetVirtualKeyState(VK_OK) != KEY_PUSH) {yield;}
		}
		else {
			imgId = atoi(istr[1]);
			ObjPrim_SetTexture(img, dir ~ "e" ~ IntToString(id) ~ "_" ~ IntToString(imgId) ~ ".png");
			ascent (j in 0 .. length(textObjs)) {Obj_Delete(textObjs[j]);}
			textObjs = [];
		}
		yield;
	}
	ascent (j in 0 .. length(textObjs)) {Obj_Delete(textObjs[j]);}
	Obj_Delete(bg);
	Obj_Delete(img);
}*/

/*function credits {
	let str = readCredits;
	restartBGM(23);
	let t = ObjText_Create;
	ObjText_SetFontType(t, typeface);
	ObjText_SetFontSize(t, 12 * fontScale);
	ObjText_SetFontBorderType(t, BORDER_FULL);
	ObjText_SetFontBorderWidth(t, 2);
	ObjText_SetFontBorderColor(t, 0, 0, 0);
	ObjText_SetFontColorTop(t, 255, 255, 255);
	ObjText_SetFontColorBottom(t, 224, 224, 255);
	ObjText_SetMaxWidth(t, 320);
	ObjText_SetTextWW(t, str, 510, 12 * fontScale, typeface);
	ObjRender_SetPosition(t, 320, 480, 0);
	Obj_SetRenderPriority(t, 0.93);
	let bg = ObjPrim_Create(OBJ_SPRITE_2D);
	let dir = GetCurrentScriptDirectory ~ "../resource/bg/credits.png";
	ObjPrim_SetTexture(bg, dir);
	ObjSprite2D_SetSourceRect(bg, 0, 0, 640, 480);
	ObjSprite2D_SetDestRect(bg, 0, 0, 640, 480);
	Obj_SetRenderPriority(bg, 0.9);
	descent (y in -ObjText_GetTotalHeight(t) .. 480) {ObjRender_SetY(t, y); yield;}
	Obj_Delete(bg);
	Obj_Delete(t);
}*/