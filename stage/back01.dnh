#include "./back_header.dnh"

let randomValues = [0.3];
let seeds = [];
let sky = GetCurrentScriptDirectory ~ "../resource/luv.png";

task initBG {
	ascent (i in 0 .. 32) {
		randomValues = randomValues ~
			[
				rand(-1, 1),
				rand(-1, 1),
				rand(-1, 1),
				rand(-1, 1),
				rand(-1, 1),
				rand(-1, 1),
				rand(-1, 1),
				rand(-1, 1)
			];
	}
	ascent (i in 0 .. 8) {
		seeds = seeds ~ [truncate(rand(16384, 32768))];
	}
	if (getEffectCut == 4) {CloseScript(GetOwnScriptID);}
	let waterPath = GetCurrentScriptDirectory ~ "../resource/rentex/09_DIFFUSE.jpg";
	let w1 = rectangular(waterPath, 560, -50, 20, 560, 100, 20, 560, -50, 10, 560, 100, 10, 2, 1);
	let w2 = rectangular(waterPath, 570, -50, 20, 570, 100, 20, 570, -50, 10, 570, 100, 10, 2, 1);
	let w3 = rectangular(waterPath, 570, -50, 10, 570, 100, 10, 560, -50, 10, 560, 100, 10, 2, 1);
	let w4 = rectangular(waterPath, 570, -50, 20, 570, 100, 20, 560, -50, 20, 560, 100, 20, 2, 1);
	ObjRender_SetColor(w1, 64, 128, 255);
	ObjRender_SetColor(w2, 64, 128, 255);
	ObjRender_SetColor(w3, 64, 128, 255);
	ObjRender_SetColor(w4, 64, 128, 255);
	createCaveMesh(20, 70, 50, seeds[0], seeds[1], seeds[2]);
	createCaveMesh(-20, 70, 50, seeds[3], seeds[4], seeds[5]);
	SetFogEnable(true);
	SetFogParam(270, 300, 0, 0, 0);
	//debug;
}

task customBehavior {
	SetCameraRadius(1);
	SetCameraAzimuthAngle(0);
	SetCameraElevationAngle(0);
	SetCameraYaw(180);
	SetCameraFocusXYZ(-320, 5, 0);
	ascent (i in -1600 .. 1600) {
		SetCameraFocusX(i / 5);
		yield;
	}
}

let MESH_SIZE = 256;

function createCaveMesh(y, sy, res, seed1, seed2, seed3) {
	let px = MESH_SIZE / y;
	let verticesPerRow = 1 + 4 * res;
	let vertexTotal = 2 * res * verticesPerRow + 1;
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_3D);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory ~ 
		"../resource/mb3d/Rock_04_UV_H_CM_1.jpg");
	ObjPrim_SetVertexCount(obj, vertexTotal);
	function setVertex(vidx, i, j) {
		let offset = (seed1 * i * i + seed2 * j * j + seed3 * i * j) % 256;
		let x = i * px + px * (randomValues[(offset + 7) % 256]) ^ 2;
		let z = j * px + px * (randomValues[(offset + 14) % 256]) ^ 2;
		let dy = sy * (randomValues[offset]) ^ 4;
		if (absolute(j) <= 5) {dy *= (0.2 + 0.16 * absolute(j));}
		let Y = y + dy;
		let lum = 1 + randomValues[(offset + 208) % 256] * 0.1;
		ObjPrim_SetVertexPosition(obj, vidx, x, Y, z);
		ObjPrim_SetVertexUV(obj, vidx, x / res, z / res);
		ObjPrim_SetVertexColor(obj, vidx, 88 * lum, 55 * lum, 9 * lum);
	}
	let vidx = 0;
	ascent (i in -res / 2 .. res / 2) {
		ascent (j in -res .. res + 1) {
			setVertex(vidx, 2 * i, j);
			setVertex(vidx + 1, 2 * i + 1, j);
			vidx += 2;
		}
		descent (j in -res .. res + 1) {
			setVertex(vidx, 2 * i + 1, j);
			setVertex(vidx + 1, 2 * i + 2, j);
			vidx += 2;
		}
	}
	setVertex(vidx, res, res);
	Obj_SetRenderPriority(obj, 0.21);
	invisibleOnSpell(obj);
	return obj;
}