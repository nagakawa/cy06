function enemyOf(x, y, speed, angle,
	graphics, x1, y1, x2, y2,
	health, shotRate, bombRate, shotRadius, playerRadius,
	drops) {
	drops = drops ~ [0, 0, 0, 0, 0, 0, 0, 0];
	let enemy = ObjEnemy_Create(OBJ_ENEMY);
	ObjMove_SetPosition(enemy, x, y);
	ObjMove_SetSpeed(enemy, speed);
	ObjMove_SetAngle(enemy, angle);
	ObjEnemy_SetLife(enemy, health);
	ObjEnemy_SetDamageRate(enemy, shotRate, bombRate);
	// Fuck setting graphics.
	ObjPrim_SetTexture(enemy, GetCurrentScriptDirectory ~ graphics);
	ObjSprite2D_SetSourceRect(enemy, x1, y1, x2, y2);
	ObjEnemy_Regist(enemy);
	adjustEnemy(enemy, shotRadius, playerRadius, drops);
	return enemy;
}
// Why don't you just add fucking dot notation so we don't forget to put in the object ID.
task adjustEnemy(enemy, shotRadius, playerRadius, drops) {
	let x = 0;
	let y = 0;
	while (ObjEnemy_GetInfo(enemy, INFO_LIFE) > 0 && !Obj_IsDeleted(enemy)) {
		x = ObjMove_GetX(enemy);
		y = ObjMove_GetY(enemy);
		ObjEnemy_SetIntersectionCircleToShot(enemy, x, y, shotRadius);
		ObjEnemy_SetIntersectionCircleToPlayer(enemy, x, y, playerRadius);
		ObjSprite2D_SetDestCenter(enemy);
		if (canDeleteEnemy(enemy)) {Obj_Delete(enemy); return;}
		yield;
	}
	let red = drops[0];
	let blue = drops[1];
	let purple = drops[2];
	loop (red) {
		createItemU1(POWER, x + rand(-20, 20), y + rand(-20, 20));
	}
	loop (blue) {
		createItemU1(RADIUS, x + rand(-20, 20), y + rand(-20, 20));
	}
	loop (purple) {
		createItemU1(TRANCE, x + rand(-20, 20), y + rand(-20, 20));
	}
	Obj_Delete(enemy);
}

function enemyOfRotating(x, y, speed, angle,
	graphics, x1, y1, x2, y2,
	health, shotRate, bombRate, shotRadius, playerRadius,
	drops) {
	let enemy = enemyOf(x, y, speed, angle,
		graphics, x1, y1, x2, y2,
		health, shotRate, bombRate, shotRadius, playerRadius,
		drops);
	task fork {
		while (!Obj_IsDeleted(enemy)) {
			ObjRender_SetAngleZ(enemy, -(ObjMove_GetAngle(enemy) + 90));
			yield;
		}
	}
	fork;
	return enemy;
}

function spawnEnemyWithLaserPoly(x, y, speed, angle,
	graphics, x1, y1, x2, y2,
	health, shotRate, bombRate, shotRadius, playerRadius,
	drops,
	r, sides, iav, laserID, delay) {
	task laserTask(laser) {
		let a = baseAngle;
		ObjShot_SetAutoDelete(laser, false);
		while (!Obj_IsDeleted(center)) {
			a += iav;
			ObjMove_SetPosition(laser, ObjMove_GetX(center) + r * cos(a), ObjMove_GetY(center) + r * sin(a));
			ObjStLaser_SetAngle(laser, ObjStLaser_GetAngle(laser) + iav);
			yield;
		}
		ObjShot_ToItem(laser);
	}
	let center = enemyOf(x, y, speed, angle,
		graphics, x1, y1, x2, y2,
		health, shotRate, bombRate, shotRadius, playerRadius,
		drops);
	let baseAngle = rand(0, 360);
	loop (sides) {
		let laser = CreateStraightLaserA1(x + r * cos(baseAngle), y + r * sin(baseAngle),
			baseAngle + 90 + 180 / sides , 2 * r * sin(180 / sides), 20, 9999, laserID, delay);
		laserTask(laser);
		baseAngle += 360 / sides;
	}
	return center;
}

function canDeleteEnemy(enemy) {
	let x = ObjMove_GetX(enemy);
	let y = ObjMove_GetY(enemy);
	return (x < -100) || (x > GetStgFrameWidth + 100) ||
		(y < -100) || (y > GetStgFrameWidth + 100);
}