#System["./../system/system.dnh"]
#include "./../system/healthbar.dnh"
#include "../prostg.dnh"
#include "../textf.dnh"

let bossN;
let nstart;
let nend;
let sstart;
let send;
let end;
let closeOnDone = false;
let bgscr = 0;

@Initialize {
	let params = GetCommonData("BossDNHParams", []);
	bossN = params[0];
	nstart = params[1];
	nend = params[2];
	sstart = params[3];
	send = params[4];
	if (length(params) > 5) {
		closeOnDone = params[5] != 0;
	}
	if (length(params) > 6) {
		bgscr = params[6];
	}
	SetCommonData("BossN", bossN);
	TPlural;
}

@MainLoop {
	yield;
}

@Finalize {}

task TPlural {
	let dir = GetCurrentScriptDirectory;
	let obj = ObjEnemyBossScene_Create;
	let start = min(nstart, sstart);
	ascent (i in nstart .. nend) {
		ObjEnemyBossScene_Add(obj, i - start, dir ~ "../spell/non" ~ IntToString(i) ~ ".dnh");
	}
	ascent (i in sstart .. send) {
		ObjEnemyBossScene_Add(obj, i - start, dir ~ "../spell/spell" ~ IntToString(i) ~ ".dnh");
	}
	ObjEnemyBossScene_LoadInThread(obj);
	ObjEnemyBossScene_Regist(obj);
	createBossHealthbar(obj, 70, 75);
	stars(obj);
	let text = cta(S("boss.b" ~ IntToString(bossN) ~ ".tlname"));
	txh(24);
	txt("bossName");
	txp(10, 24);
	txc(192, 64, 128);
	while (!Obj_IsDeleted(obj)) {
		yield;
	}
	Obj_Delete(text);
	//loop (300) {yield;}
	wait(60);
	SetCommonData("ShakeDisabled", false);
	if (closeOnDone) {
		wait(179);
		RenderToTextureA1("TB", 0, 100, true);
		yield;
		CloseStgScene;
	}
	CloseScript(GetOwnScriptID);
}

task stars(obj) {
	let sl = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(sl, GetCurrentScriptDirectory ~ "../resource/nesmeja.png");
	ObjSpriteList2D_SetSourceRect(sl, 0, 0, 15, 15);
	Obj_SetRenderPriority(sl, 0.79);
	let offsets = [];
	let ict = max(nend - nstart, send - sstart);
	let dt = 0;
	ascent (i in 0 .. ict) {
		offsets = offsets ~ [rand(-4, 4), rand(-4, 4), rand(0, 360)];
	}
	while (!Obj_IsDeleted(obj)) {
		let ct = ObjEnemyBossScene_GetInfo(obj, INFO_REMAIN_STEP_COUNT);
		ObjSpriteList2D_ClearVertexCount(sl);
		ascent (i in 0 .. ct) {
			let x = 18 + 18 * i + offsets[3 * i];
			let y = 12 + offsets[3 * i + 1];
			ObjRender_SetPosition(sl, x, y, 0);
			ObjRender_SetAngleZ(sl, offsets[3 * i + 2] + dt);
			ObjSpriteList2D_SetDestCenter(sl);
			ObjSpriteList2D_AddVertex(sl);
		}
		// ObjSpriteList2D_CloseVertex(sl);
		dt += 1.3;
		yield;
	}
	Obj_Delete(sl);
}