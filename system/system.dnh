#include "../prostg.dnh"
#include "../itsbloc.dnh"

let cwd = GetCurrentScriptDirectory;

@Initialize {
	if (getDifficulty == -2) {
		LoadCommonDataAreaFromReplayFile("Replay");
		let difficulty = GetAreaCommonData("Replay", "Difficulty", 1);
		setDifficulty(difficulty);
	}
	else {
		SetAreaCommonData("Replay", "Difficulty", getDifficulty);
	}
	if (GetCommonData("Start", false)) {reset;}
	SetCommonData("Dialogue", false);
	StartItemScript(cwd ~ "item/system_item.dnh");
	let path = cwd ~ "../player/playersd.dnh";
	LoadEnemyShotData(path); //Loads the player bullet graphics
	path = cwd ~ "../hele/shotbullets.txt";
	LoadEnemyShotData(path);
	path = cwd ~ "../ambient/shotdata.dnh";
	LoadEnemyShotData(path);
	initFrame;
	score(false);
	score(true);
	tPower;
	radius;
	value;
	trance;
	difficultyText;
	timeLeft;
	mech;
}

@Event {
	alternative (GetEventType)
	/*case (EV_START_BOSS_SPELL) {
		let path = dirCurrent ~ "system_magic_circle.dnh";
		let id = LoadScript(path);
		StartScript(id);
	}*/
	/*case (EV_GAIN_SPELL) {
		let objScene = GetEnemyBossSceneObjectID;
		let radius = ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE);
		spellBonus(radius);
	}*/
}

@MainLoop {yield;}

function initFrame {
	let path = cwd ~ "../resource/stgframe.png";
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, path);
	Obj_SetRenderPriority(obj, 0.05);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 800, 600);
	ObjSprite2D_SetDestRect(obj, 0, 0, 800, 600);
	SetStgFrame(20, 20, 480, 580, 20, 80);
}

task reset {
	yield;
	setPower(0);
	setRadius(5);
	setValue(0.01);
	AddGraze(-GetGraze);
	SetCommonData("pauseblocked", false);
}

function createNumberObject(x, y, tr, tg, tb, mw) {
	let obj = ObjText_Create;
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriority(obj, 0.1);
	ObjRender_SetY(obj, y);
	ObjRender_SetX(obj, x);
	ObjText_SetMaxWidth(obj, mw);
	ObjText_SetHorizontalAlignment(obj, ALIGNMENT_RIGHT);
	ObjText_SetFontType(obj, S("font.score"));
	ObjText_SetFontSize(obj, 24);
	ObjText_SetFontColorTop(obj, tr, tg, tb);
	ObjText_SetFontColorBottom(obj, 255, 255, 255);
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 2);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	Obj_SetRenderPriority(obj, 0.19);
	return obj;
}

function updateInt(obj, n) {
	let text = IntToStringIL(n);
	ObjText_SetText(obj, text);
}

function updateReal(obj, n, prec) {
	let text = RealToStringIL(n, prec);
	ObjText_SetText(obj, text);
}

function createText(x, y, tr, tg, tb, key) {
	let obj = cta(S(key));
	txp(x, y);
	txct(tr, tg, tb);
	txcb(255, 255, 255);
	txb(0, 0, 0);
	txh(24);
	txt("charIntro");
	txr(19);
	return obj;
}

function getHighScore {
	let hs = GetAreaCommonData("Cy06",
		"HS" ~ IntToString(getCharacter) ~ IntToString(getDifficulty), [[1024]])[0][0];
	return max(GetScore, hs);
}

task score(isHigh) {
	let text = createText(525, 110 - 50 * isHigh, 128, 255, 128, ["stgf.score", "stgf.hiscore"][isHigh]);
	let num = createNumberObject(525, 140 - 50 * isHigh, 128, 255, 128, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateInt(num, [GetScore, getHighScore][isHigh]);
		yield;
	}
}

task tPower {
	let text = createText(525, 160, 255, 128, 128, "stgf.power");
	let num = createNumberObject(525, 190, 255, 128, 128, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateReal(num, getPower, 2);
		yield;
	}
}

task radius {
	let text = createText(525, 210, 128, 128, 255, "stgf.radius");
	let num = createNumberObject(525, 240, 128, 128, 255, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateReal(num, getRadius, 2);
		yield;
	}
}

task value {
	let text = createText(525, 260, 128, 255, 255, "stgf.value");
	let num = createNumberObject(525, 290, 128, 255, 255, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateReal(num, getValue, sinterval);
		yield;
	}
}

task trance {
	let text = createText(525, 310, 192, 128, 192, "stgf.trance");
	let num = createNumberObject(525, 340, 192, 128, 192, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		let normalized = getTrancePercentage * base ^ 2 / 100;
		ObjText_SetText(num, IntToStringIL(normalized) ~ S("stgf.trance.suffix"));
		yield;
	}
}

task timeLeft {
	let num = createNumberObject(GetStgFrameWidth - 80, GetStgFrameTop + 8, 255, 255, 192, 80);
	Obj_SetRenderPriority(num, 1);
	while (!IsCloseScript(GetOwnScriptID)) {
		let bs = GetEnemyBossSceneObjectID;
		if (bs != ID_INVALID) {
			let timeF = ObjEnemyBossScene_GetInfo(bs, INFO_TIMERF) / 60;
			updateReal(num, timeF, 2);
		}
		Obj_SetVisible(num, bs != ID_INVALID);
		yield;
	}
}

let colors = [
	[128, 255, 128],
	[128, 255, 255],
	[128, 128, 255],
	[255, 128, 255],
	[255, 128, 128],
	[255, 255, 128],
	[255, 192, 128]
];

task difficultyText {
	let d = getDifficulty;
	let obj = cta(S("stgf.d" ~ IntToString(d)));
	txp(480, 20);
	let c = colors[d];
	txc(c[0], c[1], c[2]);
	txb(c[0] / 2, c[1] / 2, c[2] / 2); 
	txh(36);
	txt("menu");
	txr(19);
	txalign(320, ALIGNMENT_CENTER);
}

task mech {
	let player = GetPlayerObjectID;
	let oldg = GetGraze;
	while (!IsCloseScript(GetOwnScriptID)) {
		if (GetGraze - oldg > 0) {playSE("on01");}
		AddScore(-GetScore);
		AddScore(GetGraze);
		if (getTrancePercentage >= 100) {
			activateTrance(true);
		} else if (getTrancePercentage <= 0) {
			setTrancePercentage(0);
			activateTrance(false);
		}
		if (isTranceActive) {
			addTrancePercentage(-1 / 6);
		}
		oldg = GetGraze;
		yield;
	}
}
