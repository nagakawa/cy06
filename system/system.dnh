#include "../prostg.dnh"
#include "../itsbloc.dnh"

let cwd = GetCurrentScriptDirectory;

@Initialize {
	if (IsReplay) {
		LoadCommonDataAreaFromReplayFile("Replay");
		loadStageStats(GetCommonData("Stage", 131) - 1);
	}
	else {
		SetAreaCommonData("Replay", "Difficulty", getDifficulty);
	}
	if (GetCommonData("Start", false)) {reset;}
	SetCommonData("Dialogue", false);
	SetCommonData("pauseblocked", false);
	StartItemScript(cwd ~ "item/system_item.dnh");
	let path = cwd ~ "../player/playersd.dnh";
	LoadEnemyShotData(path); //Loads the player bullet graphics
	path = cwd ~ "../hele/shotbullets.txt";
	LoadEnemyShotData(path);
	path = cwd ~ "../ambient/shotdata.dnh";
	LoadEnemyShotData(path);
	initFrame;
	score(false);
	score(true);
	tPower;
	radius;
	value;
	trance;
	difficultyText;
	timeLeft;
	currentFps;
	replayFps;
	mech;
	pollForGameOver;
	showRank;
}

@Event {
	alternative (GetEventType)
	/*case (EV_START_BOSS_SPELL) {
		let path = dirCurrent ~ "system_magic_circle.dnh";
		let id = LoadScript(path);
		StartScript(id);
	}*/
	/*case (EV_GAIN_SPELL) {
		let objScene = GetEnemyBossSceneObjectID;
		let radius = ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE);
		spellBonus(radius);
	}*/
}

@MainLoop {yield;}

function initFrame {
	let path = cwd ~ "../resource/stgframe.png";
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, path);
	Obj_SetRenderPriority(obj, 0.05);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 800, 600);
	ObjSprite2D_SetDestRect(obj, 0, 0, 800, 600);
	SetStgFrame(20, 20, 480, 580, 20, 80);
}

task reset {
	yield;
	if (true || !IsReplay) {
		WriteLog("reset stats");
		setPower(0);
		setRadius(5);
		setValue(0.01);
		setRank(getDifficulty);
		AddGraze(-GetGraze);
	}
}

function createNumberObject(x, y, tr, tg, tb, mw) {
	let obj = ObjText_Create;
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriority(obj, 0.1);
	ObjRender_SetY(obj, y);
	ObjRender_SetX(obj, x);
	ObjText_SetMaxWidth(obj, mw);
	ObjText_SetHorizontalAlignment(obj, ALIGNMENT_RIGHT);
	ObjText_SetFontType(obj, S("font.score"));
	ObjText_SetFontSize(obj, 24);
	ObjText_SetFontColorTop(obj, tr, tg, tb);
	ObjText_SetFontColorBottom(obj, 255, 255, 255);
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 2);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	Obj_SetRenderPriority(obj, 0.19);
	return obj;
}

function updateInt(obj, n) {
	let text = IntToStringIL(n);
	ObjText_SetText(obj, text);
}

function updateReal(obj, n, prec) {
	let text = RealToStringIL(n, prec);
	ObjText_SetText(obj, text);
}

function createText(x, y, tr, tg, tb, key) {
	let obj = cta(S(key));
	txp(x, y);
	txct(tr, tg, tb);
	txcb(255, 255, 255);
	txb(0, 0, 0);
	txh(24);
	txt("charIntro");
	txr(19);
	return obj;
}

function getHighScore {
	let hs = GetAreaCommonData("Cy06",
		"HS" ~ IntToString(getCharacter) ~ IntToString(getDifficulty), [[2048]])[0][0];
	return max(GetScore, hs);
}

task score(isHigh) {
	let text = createText(525, 110 - 50 * isHigh, 128, 255, 128, ["stgf.score", "stgf.hiscore"][isHigh]);
	let num = createNumberObject(525, 140 - 50 * isHigh, 128, 255, 128, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateInt(num, [GetScore, getHighScore][isHigh]);
		yield;
	}
}

task tPower {
	let text = createText(525, 160, 255, 128, 128, "stgf.power");
	let num = createNumberObject(525, 190, 255, 128, 128, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateReal(num, getPower, 2);
		yield;
	}
}

task radius {
	let text = createText(525, 210, 128, 128, 255, "stgf.radius");
	let num = createNumberObject(525, 240, 128, 128, 255, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateReal(num, getRadius, 2);
		yield;
	}
}

task value {
	let text = createText(525, 260, 128, 255, 255, "stgf.value");
	let num = createNumberObject(525, 290, 128, 255, 255, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateReal(num, getValue, sinterval);
		yield;
	}
}

task trance {
	let text = createText(525, 310, 192, 128, 192, "stgf.trance");
	let num = createNumberObject(525, 340, 192, 128, 192, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		let normalized = getTrancePercentage * base ^ 2 / 100;
		ObjText_SetText(num, IntToStringIL(normalized) ~ S("stgf.trance.suffix"));
		yield;
	}
}

task timeLeft {
	let num = createNumberObject(GetStgFrameWidth - 80, GetStgFrameTop + 8, 255, 255, 192, 80);
	Obj_SetRenderPriority(num, 1);
	while (!IsCloseScript(GetOwnScriptID)) {
		let bs = GetEnemyBossSceneObjectID;
		if (bs != ID_INVALID) {
			let timeF = ObjEnemyBossScene_GetInfo(bs, INFO_TIMERF) / 60;
			updateReal(num, timeF, 2);
			if (ObjEnemyBossScene_GetInfo(bs, INFO_IS_DURABLE_SPELL)) {
				ObjText_SetFontColorTop(num, 192, 192, 255);
			} else if (timeF < 10) {
				ObjText_SetFontColorTop(num, 255, 192, 192);
			} else {
				ObjText_SetFontColorTop(num, 255, 255, 192);
			}
		}
		Obj_SetVisible(num, bs != ID_INVALID);
		yield;
	}
}

let colors = [
	[128, 255, 128],
	[128, 255, 255],
	[128, 128, 255],
	[255, 128, 255],
	[255, 128, 128],
	[255, 255, 128],
	[255, 192, 128]
];

task difficultyText {
	let d = getDifficulty;
	let obj = cta(S("stgf.d" ~ IntToString(d)));
	txp(480, 20);
	let c = colors[d];
	txc(c[0], c[1], c[2]);
	txb(c[0] / 2, c[1] / 2, c[2] / 2); 
	txh(36);
	txt("menu");
	txr(19);
	txalign(320, ALIGNMENT_CENTER);
}

task mech {
	let player = GetPlayerObjectID;
	let oldg = GetGraze;
	while (!IsCloseScript(GetOwnScriptID)) {
		if (!inDialogue) {
			if (GetGraze - oldg > 0) {playSE("on01");}
			AddScore(-GetScore);
			AddScore(GetGraze);
			if (getTrancePercentage >= 100) {
				activateTrance(true);
			} else if (getTrancePercentage <= 0) {
				setTrancePercentage(0);
				activateTrance(false);
			}
			if (isTranceActive) {
				addTrancePercentage(-1 / 6);
			}
			oldg = GetGraze;
			addRank(0.00005);
		}
		yield;
	}
}

task currentFps {
	let objText = ObjText_Create;
	ObjText_SetFontSize(objText, 14);
	ObjText_SetFontType(objText, S("font.score"));
	ObjText_SetFontBold(objText, true);
	ObjText_SetFontColorTop(objText, 128, 128, 255);
	ObjText_SetFontColorBottom(objText, 255, 255, 255);
	ObjText_SetFontBorderType(objText, BORDER_FULL);
	ObjText_SetFontBorderColor(objText, 0, 0, 0);
	ObjText_SetFontBorderWidth(objText, 1);
	ObjText_SetHorizontalAlignment(objText, ALIGNMENT_RIGHT);
	ObjText_SetMaxWidth(objText, GetScreenWidth - 8);
	Obj_SetRenderPriority(objText, 1.0);
	ObjRender_SetX(objText, 0);
	ObjRender_SetY(objText, GetScreenHeight - 20);
	loop {
		let fps = GetCurrentFps;
		let text = RealToStringL(fps, 2);
		ObjText_SetText(objText, text);
		yield;
	}
}

task replayFps {
	if (!IsReplay) { return; }
	let objText = ObjText_Create;
	ObjText_SetFontSize(objText, 12);
	ObjText_SetFontType(objText, S("font.score"));
	ObjText_SetFontBold(objText, true);
	ObjText_SetFontColorTop(objText, 128, 128, 255);
	ObjText_SetFontColorBottom(objText, 255, 255, 255);
	ObjText_SetFontBorderType(objText, BORDER_FULL);
	ObjText_SetFontBorderColor(objText, 0, 0, 0);
	ObjText_SetFontBorderWidth(objText, 1);
	Obj_SetRenderPriority(objText, 1.0);
	let px = GetStgFrameLeft + GetStgFrameWidth - 18;
	let py = GetStgFrameTop + GetScreenHeight - 14;
	ObjRender_SetX(objText, px);
	ObjRender_SetY(objText, py);
	loop {
		let fps = GetReplayFps;
		let text = RealToStringL(fps, 2);
		ObjText_SetText(objText, text);
		yield;
	}
}

#include "./transparent_background.dnh"

task pollForGameOver {
	yield;
	loop {
		if (GetPlayerLife < 0 || GetVirtualKeyState(VK_USER2) == KEY_PUSH) {
			SetPlayerLife(-1);
			RenderToTextureA1("TB", 0, 100, true);
			submitScore;
		}
		yield;
	}
}

function submitScore {
	SetCommonData("pauseblocked", true);
	let m = getMode;
	if ((m == MODE_ALL || m == MODE_STAGE + 7 || m == MODE_STAGE + 8) &&
			!IsReplay) {
		WriteLog(getCharacter);
		WriteLog(getDifficulty);
		WriteLog(GetCommonData("Stage", 1));
		WriteLog(GetScore);
		NotifyEventAll(EV_SUBMIT, [getCharacter, getDifficulty, GetCommonData("Stage", 1), GetScore]);
		while (!GetCommonData("HSSubmitDone", false)) {yield;}
	}
	SetCommonData("Dedz", true);
	SetCommonData("HSSubmitDone", false);
	CloseStgScene;
}

task loadStageStats(stage) {
	let s = IntToString(stage);
	SetAreaCommonData(
		"Replay", "Power",
		GetAreaCommonData("Replay", "Power" ~ s, 0)
	);
	SetAreaCommonData(
		"Replay", "Radius",
		GetAreaCommonData("Replay", "Radius" ~ s, 5)
	);
	SetAreaCommonData(
		"Replay", "Value",
		GetAreaCommonData("Replay", "Value" ~ s, 0.01)
	);
	SetAreaCommonData(
		"Replay", "Trance",
		GetAreaCommonData("Replay", "Trance" ~ s, 0)
	);
	SetAreaCommonData(
		"Replay", "Rank",
		GetAreaCommonData("Replay", "Rank" ~ s, getDifficulty)
	);
}

task showRank {
	let text = createText(525, 380, 192, 128, 192, "Rank");
	let num = createNumberObject(525, 410, 192, 128, 192, 250);
	while (!IsCloseScript(GetOwnScriptID)) {
		updateReal(num, getRank, 3);
		yield;
	}
}