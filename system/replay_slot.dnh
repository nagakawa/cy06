#include "../itsbloc.dnh"
#include "../sound.dnh"
#include "./transparent_background.dnh"
#include "./rpm_text.dnh"

let NEWLINE = ToString("n" - "a") ~ ToString("k" - "a");
let selected = 0;
let exited = false;

function selectSlot {
	return selectSlotS(0);
}

function selectSlotS(idx) {
	return selectSlotC(idx, false);
}

function selectSlotC(idx, cback) {
	let currentPage = truncate(idx / 10);
	selected = idx % 10;
	let noSlots = 100;
	let slotsPerPage = 10;
	let totalPages = max(1, truncate((noSlots - 1) / slotsPerPage)) + 1;
	let slotsOnLastPage = noSlots - slotsPerPage * (totalPages - 1);
	let replayTextItems = [];
	let frames = 0;
	exited = false;
	flushZ;
	ascent (i in 0 .. slotsPerPage) {
		let strs = replayString(i + currentPage * 10);
		let items = [
			menuItem(i, strs[0], 32, 48 + 50 * i),
			menuItem(i, strs[1], 32, 68 + 50 * i),
		];
		replayTextItems = replayTextItems ~ items;
	}
	sub deleteAll {
		ascent (i in 0 .. 2 * slotsPerPage) {
			Obj_Delete(replayTextItems[i]);
		}
	}
	while (true) {
		while (!exited) {
			if (GetVirtualKeyState(VK_OK) == KEY_PULL) {
				ok;
				break;
			}
			if (GetVirtualKeyState(VK_CANCEL) == KEY_PULL ||
				GetVirtualKeyState(VK_PAUSE) == KEY_PULL) {
				cancel;
				deleteAll;
				if (cback) { return [-1, -1]; }
				else { return -1; }
			}
			let up = GetVirtualKeyState(VK_UP);
			let down = GetVirtualKeyState(VK_DOWN);
			let left = GetVirtualKeyState(VK_LEFT);
			let right = GetVirtualKeyState(VK_RIGHT);
			if (up == KEY_PUSH) {
				selected--;
				cmove;
			}
			else if (down == KEY_PUSH) {
				selected++;
				cmove;
			}
			else if (up == KEY_HOLD) {
				frames++;
				if (frames == 30 || (frames > 30 && (frames % 10 == 0))) {
					selected--;
					cmove;
				}
			}
			else if (down == KEY_HOLD) {
				frames++;
				if (frames == 30 || (frames > 30 && (frames % 10 == 0))) {
					selected++;
					cmove;
				}
			}
			if (selected < 0) {selected = slotsPerPage - 1;}
			else if (selected >= slotsPerPage) {selected = 0;}
			let prevPage = currentPage;
			if (left == KEY_PUSH) {currentPage--; turnPage;}
			else if (right == KEY_PUSH) {currentPage++; turnPage;}
			else if (left == KEY_HOLD) {
				frames++;
				if (frames == 30 || (frames > 30 && (frames % 10 == 0))) {currentPage--; turnPage;}
			}
			else if (right == KEY_HOLD) {
				frames++;
				if (frames == 30 || (frames > 30 && (frames % 10 == 0))) {currentPage++; turnPage;}
			}
			else if (up == KEY_FREE && down == KEY_FREE) {frames = 0;}
			if (currentPage < 0) {currentPage = totalPages - 1;}
			else if (currentPage >= totalPages) {currentPage = 0;}
			if (prevPage != currentPage) {
				ascent (i in 0 .. slotsPerPage) {
					let strs = replayString(currentPage * 10 + i);
					ObjText_SetText(replayTextItems[2 * i], strs[0]);
					ObjText_SetText(replayTextItems[2 * i + 1], strs[1]);
				}
			}
			yield;
		}
		let nidx = selected + 10 * currentPage;
		if (cback) {
			let stage = runScript(
				GetCurrentScriptDirectory ~ "../package/stageSelect.dnh",
				[
					GetReplayInfo(idx + 1, REPLAY_STAGE_INDEX_LIST),
					GetReplayInfo(idx + 1, REPLAY_STAGE_LAST_SCORE_LIST)
				]
			);
			if (stage != -1) {
				deleteAll;
				return [nidx, stage];
			}
		}
		else {
			deleteAll;
			return nidx;
		}
	}
}

function menuItem(i, text, x, y) {
	let objText = createTextR(text, x, y);
	task fork {
		while (!Obj_IsDeleted(objText)) {
			let b = [255, 128][i == selected];
			ObjText_SetFontColorTop(objText, 255, 255, b);
			ObjText_SetFontColorBottom(objText, 255, 255, b);
			yield;
		}
	}
	fork;
	return objText;
}

function replayString(slot) {
	let base = GetCommonData("Base", 16);
	let text = vtos("02s", IntToStringBase(slot, base)) ~ " ";
	slot++;
	if (IsValidReplayIndex(slot)) {
		let scoreStringR = "              " ~
			IntToStringIL(GetReplayInfo(slot, REPLAY_TOTAL_SCORE));
		let char = GetReplayInfo(slot, REPLAY_PLAYER_NAME);
		let num = atoi(char[6 .. 7]);
		let com = GetReplayInfo(slot, REPLAY_COMMENT);
		let coms = SplitString(com, "|");
		let charL = S("replay.c" ~ IntToString(num / 2));
		let charR = S("replay." ~ ["a", "b"][num % 2]);
		let char2 = charL ~ charR;
		# Technically the second part of the replay comment
		# is redundant, since that info is already in the
		# replay file.
		let mode = atoi(coms[2]);
		let dstring = S("replay.d" ~ coms[0]);
		let mstring = S("replay.all");
		if (mode > MODE_ALL) {
			if (mode < MODE_SPELL) {
				if (mode < 7) {
					mstring = S("menu.stagePrefix") ~ coms[2] ~ S("menu.stageSuffix");
				}
			} else {
				mstring = S("replay.spell") ~ IntToStringIL(mode - MODE_SPELL);
			}
		}
		let fps = GetReplayInfo(slot, REPLAY_FPS_AVERAGE);
		let drop = max(0, 100 * (60 - fps) / 60);
		let suffix = S("stgf.trance.suffix");
		let ds = RealToStringL(drop, 1) ~ suffix;
		let dml = 3 + truncate(log(100) / log(base)) + length(suffix);
		let dfs = IntToString(dml) ~ "s";
		return [
			text ~
				vtos("-8s", GetReplayInfo(slot, REPLAY_USER_NAME)) ~ " " ~
				GetReplayInfo(slot, REPLAY_DATE_TIME) ~ " " ~
				(scoreStringR)[(length(scoreStringR) - 12) .. length(scoreStringR)],
			"  " ~
				vtos("-8s", char2) ~ " " ~
				vtos(dfs, ds) ~ " " ~
				dstring ~ " " ~ mstring
		];
	}
	else {
		return [text ~ S("noname"), ""];
	}
}

#include "../language.dnh"
#include "../sound.dnh"

#include "../itsb.dnh"
#include "../procon.dnh"

function turnPage {playSE("paper00");}