#include "../propkg.dnh"
#include "../sound.dnh"

let textObjs = [];
let frames = 0;
let easyY = 270;
let ended = false;
let lower;
let upper;
let selected;

let colors = [
	[128, 255, 128],
	[128, 255, 255],
	[128, 128, 255],
	[255, 128, 255],
	[255, 128, 128],
	[255, 255, 128],
	[255, 192, 128]
];

@Initialize {
	lower = GetScriptArgument(0);
	upper = GetScriptArgument(1);
	selected = GetScriptArgument(2);
	main;
}

task main {
	easyY = 270 - 100 * (selected - lower);
	ascent (i in lower .. upper) {
		let item = "difficulty.d" ~ IntToString(i) ~ ".";
		let label = cta(S(item ~ "label"));
		txh(18);
		txt("charIntro");
		txr(4);
		txc(255, 255, 255);
		txb(0, 0, 0);
		txalign(400, ALIGNMENT_CENTER);
		txp(200, 270);
		textObjectTask(label, 100 * (i - lower), i);
		let label2 = cta(S(item ~ "label2"));
		txh(36);
		txt("menu");
		txr(4);
		txct(255, 255, 255);
		let cols = colors[i];
		txcb(cols[0], cols[1], cols[2]);
		txb(0, 0, 0);
		txalign(400, ALIGNMENT_CENTER);
		txp(200, 280);
		textObjectTask(label2, 100 * (i - lower) + 12, i);
		let description = cta(S(item ~ "description"));
		txh(16);
		txt("dialogue");
		txr(4);
		txc(255, 255, 255);
		txb(0, 0, 0);
		txalign(400, ALIGNMENT_CENTER);
		txp(200, 310);
		textObjectTask(description, 100 * (i - lower) + 45, i);
		textObjs = textObjs ~ [label, label2, description];
	}
	flushZ;
	let frames = 0;
	loop {
		let up = GetVirtualKeyState(VK_UP);
		let down = GetVirtualKeyState(VK_DOWN);
		let old = selected;
		if (up == KEY_PUSH) {
			selected--;
			cmove;
		}
		else if (down == KEY_PUSH) {
			selected++;
			cmove;
		}
		else if (up == KEY_HOLD) {
			frames++;
			if (frames >= 30 && (frames % 10 == 0)) {
				selected--;
				cmove;
			}
		}
		else if (down == KEY_HOLD) {
			frames++;
			if (frames >= 30 && (frames % 10 == 0)) {
				selected++;
				cmove;
			}
		}
		if (selected < lower) {selected = upper - 1;}
		else if (selected >= upper) {selected = lower;}
		let diff = selected - old;
		if (diff) {
			loop (10) {
				easyY -= diff * 10;
				yield;
			}
		}
		if (GetVirtualKeyState(VK_OK) == KEY_PUSH) {
			SetScriptResult(selected);
			flushZ;
			ok;
			finalize;
			return;
		}
		else if (GetVirtualKeyState(VK_CANCEL) == KEY_PUSH) {
			SetScriptResult(-1);
			flushX;
			cancel;
			finalize;
			return;
		}
		yield;
	}
}

@Event {
	
}

@MainLoop {
	yield;
}

task textObjectTask(obj, offset, i) {
	while (exists(obj)) {
		ObjRender_SetY(obj, easyY + offset);
		ObjRender_SetAlpha(obj, 128 + 127 * (i == selected));
		yield;
	}
}

task finalize {
	SaveCommonDataAreaA1("Cy06");
	let l = length(textObjs);
	ascent (i in 0 .. l) {
		Obj_Delete(textObjs[i]);
	}
	CloseScript(GetOwnScriptID);
}
