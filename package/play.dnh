#include "../propkg.dnh"
#include "./ingame_scenes.dnh"
#include "./loading.dnh"
#include "../system/transparent_background.dnh"
#include "./stageLoader.dnh"

let rpi = -1;
let difficulty;
let character;
let start = 1;
let STAGE_COUNT = 1;
let end = STAGE_COUNT;
let mode;
let i;

@Initialize {
	rpi = GetScriptArgument(0);
	difficulty = GetScriptArgument(1);
	character = GetScriptArgument(2);
	mode = GetScriptArgument(3);
	if (GetScriptArgumentCount >= 5) {
		start = GetScriptArgument(4);
	}
	if (GetScriptArgumentCount >= 6) {
		end = GetScriptArgument(5);
	}
	startMe(rpi, difficulty, character, mode, start, end);
	main;
}

function startMe(rpi_, difficulty_, character_, mode_, start_, end_) {
	rpi = rpi_;
	difficulty = difficulty_;
	character = character_;
	mode = mode_;
	let current = GetCurrentScriptDirectory;
	InitializeStageScene;
	WriteLog("initialized stage scene");
	i = start;
	let mainPath = current ~ "../stage/" ~ vtos("02d", i) ~ ".dnh";
	let playerPath = current ~ "../player/player" ~ IntToString(character_) ~ ".dnh";
	SetStagePlayerScript(playerPath);
	WriteLog("player set");
	startStage(i);
	SetStageMainScript(mainPath);
	WriteLog("main set");
	setDifficulty(difficulty);
	setCharacter(character);
	setMode(mode);
	WriteLog("DCM set");
	SetCommonData("Start", true);
	if (rpi != -1) {
		let path = GetReplayInfo(rpi, REPLAY_FILE_PATH);
		SetStageReplayFile(path);
	}
	WriteLog("replay set");
	StartStageScene;
	WriteLog("blastoff!");
}

sub endScene {
	if (rpi != -1 || !TEndScene(mode, rpi, difficulty, character)) {
		playBGM(0);
		TerminateStageScene;
		CloseScript(GetOwnScriptID);
	}
}

task main {
	while (!IsCloseScript(GetOwnScriptID)) {
		if (GetVirtualKeyState(VK_PAUSE) == KEY_PUSH && !GetCommonData("pauseblocked", false)) {
			let res = RunPauseScene;
			alternative (res)
			case (RESULT_RETRY) {
				TerminateStageScene;
				startMe(rpi, difficulty, character, mode, start, end);
				main;
				return;
			}
			case (RESULT_END) {
				TerminateStageScene;
				playBGM(0);
				CloseScript(GetOwnScriptID);
				return;
			}
		}
		if (isDedz) {
			dedz(false);
			endScene;
			return;
		}
		let state = GetStageSceneState;
		if (state == STAGE_STATE_FINISHED) {
			let res = GetStageSceneResult;
			alternative (res)
			case (STAGE_RESULT_CLEARED) {
				if (i == end) {
					endScene;
					return;
				} else {
					i++;
					startStage(i);
					SetCommonData("Start", false);
					let mainPath = GetCurrentScriptDirectory ~ "../stage/" ~ vtos("02d", i) ~ ".dnh";
					SetStageMainScript(mainPath);
					StartStageScene;
				}
			}
			case (STAGE_RESULT_PLAYER_DOWN) {
				endScene;
				return;
			}
			case (STAGE_RESULT_BREAK_OFF) {
				playBGM(0);
				TerminateStageScene;
				CloseScript(GetOwnScriptID);
			}
		}
		yield;
	}
}

@MainLoop {
	yield;
}

@Finalize {
	playBGM(0);
}

function isDedz {
	return GetCommonData("Dedz", false);
}

task dedz(d) {
	SetCommonData("Dedz", d);
}