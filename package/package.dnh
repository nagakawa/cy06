#TouhouDanmakufu[Package]
#ScriptVersion[3]
#Title["CY06 Exorcism of Infinite Blossoms"]
#Text["6th CY Project"]
#Player["./../player/player0.dnh", "./../player/player1.dnh", "./../player/player2.dnh", "./../player/player3.dnh", "./../player/player4.dnh", "./../player/player5.dnh"]
#System["./../system/system.dnh"]
#include "./loading.dnh"
#include "../propkg.dnh"
#include "./highscores_main.dnh"
#include "../system/transparent_background.dnh"
#include "../system/replay_slot.dnh"
#include "../rect.dnh"

// Hello viewers

let bgm;

@Initialize {
	CreateCommonDataArea("Cy06");
	LoadCommonDataAreaA2("Cy06", GetModuleDirectory ~ "data/Cy06.dat");
	dumpCy06Area;
	CreateCommonDataArea("Replay");
	CreateCommonDataArea("Str");
	CreateCommonDataArea("Shader");
	CreateRenderTarget("TB");
	initBG;
	bgm = ObjSound_Create;
	ObjSound_SetLoopEnable(bgm, true);
	ObjSound_SetSoundDivision(bgm, SOUND_BGM);
	ObjSound_SetVolumeRate(bgm, GetAreaCommonData("Cy06", "BGMVolume", 100));
	SetCommonData("BGMObj", bgm);
	init;
	ss;
	titleScene(true);
}

task initBG {
	task TVertex(i, left, top, right, bottom) {
		ObjPrim_SetVertexPosition(obj, i + 0, left, top, 0);
		ObjPrim_SetVertexPosition(obj, i + 1, left, bottom, 0);
		ObjPrim_SetVertexPosition(obj, i + 2, right, top, 0);
		ObjPrim_SetVertexPosition(obj, i + 3, right, top, 0);
		ObjPrim_SetVertexPosition(obj, i + 4, left, bottom, 0);
		ObjPrim_SetVertexPosition(obj, i + 5, right, bottom, 0);
		ObjPrim_SetVertexUVT(obj, i + 0, left, top);
		ObjPrim_SetVertexUVT(obj, i + 1, left, bottom);
		ObjPrim_SetVertexUVT(obj, i + 2, right, top);
		ObjPrim_SetVertexUVT(obj, i + 3, right, top);
		ObjPrim_SetVertexUVT(obj, i + 4, left, bottom);
		ObjPrim_SetVertexUVT(obj, i + 5, right, bottom);
		if (left >= 20 && right <= 480 && top >= 20 && bottom <= 580) {
			let alpha = 255;
			while (alpha >= 128) {
				ObjPrim_SetVertexColor(obj, i + 0, alpha, alpha, alpha);
				ObjPrim_SetVertexColor(obj, i + 1, alpha / 2, alpha / 2, alpha / 2);
				ObjPrim_SetVertexColor(obj, i + 2, alpha / 2, alpha / 2, alpha / 2);
				ObjPrim_SetVertexColor(obj, i + 3, alpha / 2, alpha / 2, alpha / 2);
				ObjPrim_SetVertexColor(obj, i + 4, alpha / 2, alpha / 2, alpha / 2);
				ObjPrim_SetVertexColor(obj, i + 5, alpha, alpha, alpha);
				alpha -= 255 / frame;
				yield;
			}
		}
	}
	let frame = 30;
	let countH = 40;
	let countV = 32;
	let width = 800 / countH;
	let height = 640 / countV;
	let target = "TB";
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, countH * countV * 6);
	Obj_SetRenderPriorityI(obj, 5);
	ObjPrim_SetTexture(obj, target);
	ascent (ix in 0.. countH) {
		ascent (iy in 0.. countV) {
			let i = (ix + iy * countH) * 6;
			let left = ix * width;
			let right = left + width;
			let top = iy * height;
			let bottom = top + height;
			TVertex(i, left, top, right, bottom);
		}
	}
	let c = 1;
	loop {
		if (getBGCt != 0) {
			Obj_SetVisible(obj, true);
			c = 1;
		} else {
			Obj_SetVisible(obj, c > 0);
			c--;
		}
		yield;
	}
}

task ss {
	loop {
		if (GetKeyState(KEY_P) == KEY_PUSH) {
			SaveSnapShotA1(GetModuleDirectory ~ "screenshot/" ~ GetCurrentDateTimeS ~ ".bmp");
		}
		yield;
	}
}

@Event {
	alternative (GetEventType)
	case (EV_PLAY_BGM) {
		let args = GetEventArgument(0);
		let id = args[0];
		let fr = args[1];
		let sg = args[2];
		if (GetCommonData("NowPlaying", -1) == id && !fr) {return;}
		let path = GetCurrentScriptDirectory ~ "../bgm/cy06_" ~ bgmNames[id] ~ ".ogg";
		ObjSound_Stop(bgm);
		if (path != "") {
			Obj_Delete(bgm);
			bgm = ObjSound_Create;
			SetCommonData("BGMObj", bgm);
			ObjSound_Load(bgm, path);
			ObjSound_SetSoundDivision(bgm, SOUND_BGM);
			ObjSound_SetVolumeRate(bgm, GetAreaCommonData("Cy06", "BGMVol", 100));
			ObjSound_SetLoopEnable(bgm, true);
			ObjSound_SetLoopTime(bgm, 0, endTimes[id]);
			task playAfter30Frames {
				wait(30);
				ObjSound_Play(bgm);
				ObjSound_SetRestartEnable(bgm, true);
			}
			playAfter30Frames;
			SetAreaCommonData("Cy06", "HeardBGM " ~ IntToString(id), true);
			SetCommonData("NowPlaying", id);
			if (sg) {
				let name = "BGM: " ~ S("music.m" ~ IntToString(id) ~ ".title");
				let textObj = cta(name);
				txr(99);
				txp(810, 560);
				txct(192, 224, 255);
				txcb(128, 192, 255);
				txh(24);
				txt("charIntro");
				task fork {
					descent (i in 0 .. 81) {
						ObjRender_SetX(textObj, 10 * i + 32);
						yield;
					}
					loop (180) {yield;}
					ascent (i in 560 .. 600) {
						ObjRender_SetY(textObj, i);
						yield;
					}
					Obj_Delete(textObj);
				}
				fork;
			}
		}
	}
	case (EV_STOP_BGM) {
		task fork {
			let seq = [];
			ascent (i in 0 .. 8) {
				seq = seq ~ [randIntH(0, 4)];
			}
			WriteLog(seq);
			let len = length(seq);
			ascent (i in 0 .. len) {
				playSE("cursor15_" ~ ["a", "b", "c", "d"][seq[i]]);
				wait(5);
			}
		}
		if (GetEventArgument(0) != 0) {
			ObjSound_Stop(bgm);
			fork;
		} else {
			ObjSound_Play(bgm);
		}
	}
	case (EV_PLAY_SE) {
		let args = GetEventArgument(0);
		let path = GetCurrentScriptDirectory ~ "../se/" ~ args[0] ~ ".wav";
		let se = ObjSound_Create;
		let m = 100;
		if (length(args) >= 2) {
			m = atoi(args[1]);
		}
		let netVolume = truncate(0.01 * m * GetAreaCommonData("Cy06", "SEVolume", 100));
		ObjSound_SetSoundDivision(se, SOUND_SE);
		ObjSound_Load(se, path);
		ObjSound_SetVolumeRate(se, netVolume);
		ObjSound_Play(se);
		task go {
			loop (600) {yield;}
			Obj_Delete(se);
		}
		go;
	}
	case (EV_SUBMIT) {
		WriteLog("submitScore was called");
		viewHS(GetEventArgument(0));
	}
}

task titleScene(showIntro) {
	let titleSceneEnded = false;
	let dir = GetCurrentScriptDirectory;
	let pathTitle = dir ~ "../resource/intro.png";
	let pathTitle2 = dir ~ "../resource/title.png";
	let pathTitle3 = dir ~ "../resource/menu.png";
	let titleImg = ObjPrim_Create(OBJ_SPRITE_2D);
	// Imagine if you could val titleImg = new Sprite2D(path = pathTitle, coordinate = ToWindow, source = (0, 0, 640, 480), dest = (0, 0, 640, 480), priority = 0.004)
	Obj_SetRenderPriority(titleImg, 0);
	if (showIntro) {
		ObjPrim_SetTexture(titleImg, pathTitle);
		ObjSprite2D_SetSourceRect(titleImg, 0, 0, 800, 600);
		ObjSprite2D_SetDestRect(titleImg, 0, 0, 800, 600);
		loadWithDefaults;
		wait(150);
		//initColorfulShader;
	}
	ObjPrim_SetTexture(titleImg, pathTitle2);
	ObjSprite2D_SetSourceRect(titleImg, 0, 0, 800, 600);
	ObjSprite2D_SetDestRect(titleImg, 0, 0, 800, 600);
	// we don't need to create the title text; it's already on there.
	let START = 0;
	let EXTRA = 1;
	let PRACTICE = 2;
	let SPELL_PRACTICE = 3;
	let REPLAY = 4;
	let DATA = 5;
	let MUSIC_ROOM = 6;
	let MANUAL = 7;
	let CHARACTERS = 8;
	let OPTION = 9;
	let QUIT = 10;
	let selected = 0;
	function menuItem(i, x, y, text, b) {
		let objText = cta(text);
		txp(x, y);
		txcb(96 + 32 * b, 96 + 32 * b, 144 + 95 * b);
		txct(112 + 64 * b, 112 + 64 * b, 144 + 95 * b);
		txb(32 + 32 * b, 32 + 32 * b, 88 + 88 * b);
		txh(32);
		txr(1);
		txt("menu");
		let objSelect = cta(text);
		txp(x, y);
		txcb(96 + 32 * b, 96 + 32 * b, 144 + 95 * b);
		txct(112 + 64 * b, 112 + 64 * b, 144 + 95 * b);
		txb(32 + 32 * b, 32 + 32 * b, 88 + 88 * b);
		txh(32);
		txr(1);
		txt("menu");
		ObjRender_SetBlendType(objSelect, BLEND_ADD_RGB);
		task fork {
			while (!titleSceneEnded) {
				Obj_SetVisible(objSelect, i == selected);
				yield;
			}
			Obj_Delete(objText);
			Obj_Delete(objSelect);
		}
		fork;
		return [objText, objSelect];
	}
	playBGM(0);
	let x = 600;
	let y = 142;
	//let exUnlocked = isExtraUnlocked(0) || isExtraUnlocked(1) || isExtraUnlocked(2) || isExtraUnlocked(3);
	let enabled = [true, false, true, false, true, false, false, false, false, true, true];
	let labels = ["start", "extra", "practice", "spell", "replay", "scores", "musicRoom", "manual", "character", "options", "quit"];
	let itemCt = length(labels);
	let titleItems = [];
	ascent (i in 0 .. itemCt) {
		titleItems = titleItems ~ menuItem(i, rand(560, 600), y + 32 * i,
			S("menu.main." ~ labels[i]), enabled[i]);
	}
	let bottomMatter = cta("(C)opyright 2015 Fluffy8x/AGC.[r]Ver 0.01tr.");
	txp(20, 490);
	txct(255, 192, 192);
	txcb(255, 128, 128);
	txb(128, 64, 64);
	txh(32);
	txt("bossName");
	txr(1);
	titleItems = titleItems ~ [bottomMatter];
	SaveCommonDataAreaA2("Cy06", GetModuleDirectory ~ "data/Cy06.dat");
	flushZ;
	let frames = 0;
	while (!titleSceneEnded) {
		if (GetVirtualKeyState(VK_OK) == KEY_PUSH) {
			if (selected != QUIT) {
				ok;
				ObjPrim_SetTexture(titleImg, pathTitle3);
				Obj_SetRenderPriorityI(titleImg, 2);
			}
			// TODO: fill in the stubs
			alternative (selected)
			case (START) {
				// play(-1);
				// runScript(dir ~ "difficultySelect.dnh", [0, 5]);
				// runScript(dir ~ "playerSelect.dnh", []);
				let lp = getLevelAndPlayer(0, 5);
				if (lp[0] != -1) {
					ObjRender_SetColor(titleImg, 0, 0, 0);
					runScript(dir ~ "play.dnh", [-1, lp[0], lp[1], 0]);
					ObjRender_SetColor(titleImg, 255, 255, 255);
				}
			}
			/*case (EXTRA) {
				if (exUnlocked) {playX(-1);}
			}*/
			case (PRACTICE) {
				let lp = getLevelPlayerAndStage(0, 5);
				if (lp[0] != -1) {
					ObjRender_SetColor(titleImg, 0, 0, 0);
					runScript(dir ~ "play.dnh", [-1, lp[0], lp[1], lp[2]]);
					ObjRender_SetColor(titleImg, 255, 255, 255);
				}
			}
			case (SPELL_PRACTICE) {
				ObjRender_SetColor(titleImg, 0, 0, 0);
				runScript(dir ~ "playS.dnh", [-1, 1, 1, 3]);
				ObjRender_SetColor(titleImg, 255, 255, 255);
			}
			case (REPLAY) {
				replayMenu(titleImg);
			}
			/*case (DATA) {
				data;
			}*/
			case (OPTION) {
				runScript(dir ~ "options.dnh", []);
				ascent (i in 0 .. itemCt) {
					let t = S("menu.main." ~ labels[i]);
					ObjText_SetText(titleItems[2 * i], t);
					ObjText_SetText(titleItems[2 * i + 1], t);
				}
			}
			case (QUIT) {
				cancel;
				yield;
				SaveCommonDataAreaA2("Cy06", GetModuleDirectory ~ "data/Cy06.dat");
				wait(59);
				ObjPrim_SetTexture(titleImg, pathTitle2);
				Obj_SetRenderPriorityI(titleImg, 0);
				WriteLog("STOP");
				Obj_Delete(titleImg);
				ClosePackage;
				return;
			}
			ObjPrim_SetTexture(titleImg, pathTitle2);
			Obj_SetRenderPriorityI(titleImg, 0);
			SaveCommonDataAreaA2("Cy06", GetModuleDirectory ~ "data/Cy06.dat");
		}
		let up = GetVirtualKeyState(VK_UP);
		let down = GetVirtualKeyState(VK_DOWN);
		if (up == KEY_PUSH) {
			selected--;
			cmove;
		}
		else if (down == KEY_PUSH) {
			selected++;
			cmove;
		}
		else if (up == KEY_HOLD) {
			frames++;
			if (frames == 30 || (frames > 30 && (frames % 10 == 0))) {
				selected--;
				cmove;
			}
		}
		else if (down== KEY_HOLD) {
			frames++;
			if (frames == 30 || (frames > 30 && (frames % 10 == 0))) {
				selected++;
				cmove;
			}
		}
		else {frames = 0;}
		if (selected < 0) {selected = itemCt - 1;}
		else if (selected >= itemCt) {selected = 0;}
		yield;
	}
}

@MainLoop { yield; }

function getLevelAndPlayer(ld, ud) {
	let difficulty = ld;
	let dir = GetCurrentScriptDirectory;
	loop {
		difficulty = runScript(dir ~ "difficultySelect.dnh", [ld, ud, difficulty]);
		if (difficulty == -1) {return [-1, -1];}
		let player = runScript(dir ~ "playerSelect.dnh", [difficulty]);
		if (player != -1) {return [difficulty, player];}
	}
}

function getLevelPlayerAndStage(ld, ud) {
	let difficulty = ld;
	let dir = GetCurrentScriptDirectory;
	loop {
		difficulty = runScript(dir ~ "difficultySelect.dnh", [ld, ud, difficulty]);
		if (difficulty == -1) {return [-1, -1, -1];}
		loop {
			let playerStage = runScript(dir ~ "playerSelect.dnh", [difficulty, 1]);
			if (playerStage[0] != -1 && playerStage[1] != -1) {
				return [difficulty] ~ playerStage;
			}
			if (playerStage[0] == -1) { break; }
		}
	}
}

task viewHS(arg) {
	yield;
	SetCommonData("HSSubmitDone", false);
	hsOf(SUBMIT_HIGH_SCORE, arg);
}

function replayMenu(titleImg) {
	LoadReplayList;
	let dir = GetCurrentScriptDirectory;
	function slot {
		return slotSt[0];
	}
	function stage {
		return slotSt[1];
	}
	let slotSt = selectSlotC(0, true);
	while (slot != -1) {
		if (IsValidReplayIndex(slot + 1)) {
			let commS = GetReplayInfo(slot + 1, REPLAY_COMMENT);
			let comm = SplitString(commS, "|");
			let difficulty = atoi(comm[0]);
			let character = atoi(comm[1]);
			let mode = atoi(comm[2]);
			yield;
			ObjRender_SetColor(titleImg, 0, 0, 0);
			if (mode == MODE_ALL) {
				runScript(dir ~ "play.dnh", [slot + 1, difficulty, character, 0, stage]);
			}
			else if (mode < MODE_SPELL) {
				runScript(dir ~ "play.dnh", [slot + 1, difficulty, character, mode, mode, mode]);
			}
			else { // spell
				let spln = mode - MODE_SPELL;
				runScript(dir ~ "playS.dnh", [slot + 1, difficulty, character, spln]);
			}
			ObjRender_SetColor(titleImg, 255, 255, 255);
		}
		slotSt = selectSlotC(slot, true);
	}
}

task dumpCy06Area {
	let keys = GetCommonDataValueKeyList("Cy06");
	let len = length(keys);
	let handle = ObjFile_Create(OBJ_FILE_TEXT);
	ObjFile_OpenNW(handle, GetModuleDirectory ~ "debug/cy06.txt");
	ascent (i in 0 .. len) {
		let key = keys[i];
		ObjFileT_AddLine(handle,
			key ~ " is " ~ ToString(GetAreaCommonData("Cy06", key, "a mutilated puppy")));
	}
	ObjFile_Store(handle);
}