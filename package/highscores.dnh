// high scores

#include "../language.dnh"
#include "../system/name_entry.dnh"
#include "../sound.dnh"
#include "../system/transparent_background.dnh"
#include "../system/rpm_text.dnh"

let op;
let data;
let head;
let text;

let SUBMIT_HIGH_SCORE = 0;
let VIEW_HIGH_SCORE = 1;
let NO_ENTRY = "** NO ENTRY **";
let hsFont = S("font.score");
let scin = 128;
let scarr = [];
let scnames = [];
let chara;
let difficulty;
let score;
let stage;

#include "../itsb.dnh"

@Initialize {
	arrows;
}

@Event {
	
}

@MainLoop {
	yield;
}

task arrows {
	TBackground;
	descent (i in 0 .. 16) {
		scarr = scarr ~ [[scin * (i + 1), 1]];
		scnames = scnames ~ [NO_ENTRY];
	}
	op = GetScriptArgument(0);
	data = GetScriptArgument(1);
	chara = data[0];
	difficulty = data[1];
	if (op == SUBMIT_HIGH_SCORE) {
		stage = data[2];
		score = data[3];
		if (hasHighScore(score, chara, difficulty)) {
			yield;
			let name = enterName("HighScoreGet!");
			let hs = getHighScore(chara, difficulty);
			let hsn = getHighScoreNames(chara, difficulty);
			let i = 0;
			loop {
				if (score > hs[i][0]) {break;}
				i++;
			}
			descent (j in i .. 15) {
				hs[j + 1] = hs[j];
				hsn[j + 1] = hsn[j];
			}
			hs[i] = [score, stage];
			hsn[i] = name;
			SetAreaCommonData("Cy06", "HS" ~ IntToString(chara) ~ IntToString(difficulty), hs);
			SetAreaCommonData("Cy06", "HSn" ~ IntToString(chara) ~ IntToString(difficulty), hsn);
			SaveCommonDataAreaA2("Cy06", GetModuleDirectory ~ "data/Cy06.dat");
		}
	}
	head = createTextR("", 64, 64);
	ObjText_SetFontType(head, S("font.dialogue"));
	text = createTextR("", 96, 84);
	ObjText_SetSyntacticAnalysis(text, true);
	Obj_SetRenderPriority(text, 0.1);
	update(chara, difficulty);
	flushZ;
	flushX;
	loop {
		if (isPushed(VK_OK) ||
			isPushed(VK_CANCEL)) {
			Obj_Delete(text);
			Obj_Delete(head);
			TStopBG;
			CloseScript(GetOwnScriptID);
			return;
		}
		if (op == VIEW_HIGH_SCORE) {
			if (isPushed(VK_UP)) {
				difficulty--;
				turnPage;
				if (difficulty < 0) {difficulty = 5;}
				update(chara, difficulty);
			}
			else if (isPushed(VK_DOWN)) {
				difficulty++;
				turnPage;
				if (difficulty > 5) {difficulty = 0;}
				update(chara, difficulty);
			}
			else if (isPushed(VK_LEFT)) {
				chara--;
				turnPage;
				if (chara < 0) {chara = 3;}
				update(chara, difficulty);
			}
			else if (isPushed(VK_RIGHT)) {
				chara++;
				turnPage;
				if (chara > 3) {chara = 0;}
				update(chara, difficulty);
			}
		}
		yield;
	}
}

function isPushed(key) {
	return GetVirtualKeyState(key) == KEY_PUSH;
}

function update(c, d) {
	let se = scoreEntry(c, d);
	ObjText_SetText(head, se[0]);
	ObjText_SetText(text, se[1]);
}

function scoreEntry(chara, diff) {
	let charDesc = "character.c" ~ IntToString(chara / 2);
	let header = S(charDesc ~ ".name") ~ " " ~
		S(charDesc ~ [".a", ".b"][chara % 2] ~ ".label") ~ " " ~
		S("hs.d" ~ IntToString(diff));
	let hs = getHighScore(chara, diff);
	let hsn = getHighScoreNames(chara, diff);
	let base = GetCommonData("Base", 16);
	let entries = "";
	ascent (i in 0 .. 16) {
		let raw = hs[i];
		let name = hsn[i];
		if (name == NO_ENTRY) {
			name = S("noname");
		}
		entries = entries ~
			"0123456789ABCDEF"[i .. i + 1] ~ ". " ~ vtos("-8s", name) ~ " " ~
			vtos("14s", IntToStringBase(raw[0], base)) ~ " (" ~
			"0123456789FXC"[raw[1] .. raw[1] + 1]  ~ ")[r]";
	}
	return [header, entries];
}

function getHighScore(character, difficulty) {
	return GetAreaCommonData("Cy06", "HS" ~ IntToString(character) ~ IntToString(difficulty),
		scarr);
}

function hasHighScore(score, character, difficulty) {
	return score > getHighScore(character, difficulty)[15][0];
}

function getHighScoreNames(character, difficulty) {
	return GetAreaCommonData("Cy06", "HSn" ~ IntToString(character) ~ IntToString(difficulty),
		scnames);
}