#include "./spell_header.dnh"
#include "./sp_ceri.dnh"

let level = 1;
let id = 3;

@Event {
	alternative (GetEventType)
	case (EV_REQUEST_LIFE) {
		SetScriptResult(13000);
	}
	case (EV_REQUEST_TIMER) {
		SetScriptResult(72);
	}
}

task toggleHitbox(s) {
	while (exists(s)) {
		ObjShot_SetIntersectionEnable(
			s,
			GetObjectDistance(s, GetPlayerObjectID) <= 50
		);
		yield;
	}
}

task shootOut(speed, angle, graphic) {
	let x = ObjMove_GetX(objBoss);
	let y = ObjMove_GetY(objBoss);
	let dev = 5;
	let dy = -dev * cos(angle);
	let dx = dev * sin(angle);
	ascent (i in -1 .. 2) {
		toggleHitbox(CreateShotA1(x + i * dx, y + i * dy, speed, angle, graphic, 30));
	}
}

task shootLaserFrom(x, y) {
	let angle = 180 + getAngleToXY(GetPlayerObjectID, x, y);
	let ways = truncate(8 + 3 * getRank);
	loop (ways) {
		createLooseLaserA1(x, y, 2, angle, 100, 20, BALL_M_YELLOW, 0);
		angle += 360 / ways;
	}
}

task laserTask {
	wait(90);
	while (!isDead) {
		shootLaserFrom(160, 120);
		shootLaserFrom(GetStgFrameWidth - 160, 120);
		laserSound;
		wait(max(45, 90 - 10 * getRank));
	}
}

task TWork {
	let a = 0;
	let fd = max(2, truncate(5.6 - 0.7 * getRank));
	let av = 5.79;
	let sm = 2;
	let ex = false;
	laserTask;
	while (!isDead) {
		if (a % 180 < av * fd) {
			swingSound;
			if (!ex && ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID, INFO_TIMER) < 36) {
				ex = true;
				sm += 1;
			} else {
				sm -= 0.01;
			}
		}
		shootOut(1.3 * sm, 90 - a, LIGHT_S_RED);
		shootOut(1.3 * sm, 90 + a, LIGHT_S_BLUE);
		shootOut(0.7 * sm, 270 + a, LIGHT_S_RED);
		shootOut(0.7 * sm, 270 - a, LIGHT_S_BLUE);
		if (ex) {
			shootOut(1.5 * sm, a, LIGHT_S_GREEN);
			shootOut(1.5 * sm, -a, LIGHT_S_YELLOW);
			shootOut(0.8 * sm, 100 + a, LIGHT_S_GREEN);
			shootOut(0.8 * sm, 80 - a, LIGHT_S_YELLOW);
		}
		wait(fd);
		a += av * fd;
	}
}
