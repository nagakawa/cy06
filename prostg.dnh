#include "./procon.dnh"

// STG FRAME:
// top-left (16, 16)
// dimensions 468x568

function getPower {
	return GetCommonData("Power", 0);
}

task setPower(p) {
	SetCommonData("Power", p);
}

function createStraightLaserA1(x, y, angle, len, width, deleteTime, graphicId, delay) {
	let l = CreateStraightLaserA1(x, y, angle, len, width, deleteTime, graphicId, delay);
	ObjLaser_SetGrazeInvalidFrame(l, 3);
	return l;
}

function createLooseLaserA1(x, y, speed, angle, len, width, graphicId, delay) {
	let l = CreateLooseLaserA1(x, y, speed, angle, len, width, graphicId, delay);
	ObjLaser_SetGrazeInvalidFrame(l, 3);
	return l;
}

function createCurveLaserA1(x, y, speed, angle, len, width, graphicId, delay) {
	let l = CreateCurveLaserA1(x, y, speed, angle, len, width, graphicId, delay);
	ObjLaser_SetGrazeInvalidFrame(l, 3);
	ObjCrLaser_SetTipDecrement(l, 0);
	return l;
}

function getRadius {
	return GetCommonData("Radius", 5);
}

task setRadius(p) {
	SetCommonData("Radius", p);
}

function getValue {
	return GetCommonData("Value", 0.01);
}

task setValue(p) {
	SetCommonData("Value", p);
}

function getTrancePercentage {
	return GetCommonData("Trance", 0);
}

task setTrancePercentage(p) {
	SetCommonData("Trance", p);
}

task addTrancePercentage(p) {
	setTrancePercentage(getTrancePercentage + p);
}

function isTranceActive {
	return GetCommonData("IsTrance", false);
}

task activateTrance(active) {
	SetCommonData("IsTrance", active);
}

task hitbox {
	let path = GetCurrentScriptDirectory ~ "resource/hurtbox.png";
	let pathc = GetCurrentScriptDirectory ~ "resource/hurtbox_center.png";
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, path);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 41, 41);
	ObjSprite2D_SetDestCenter(obj);
	Obj_SetRenderPriority(obj, 0.79);
	let objc = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objc, pathc);
	ObjSprite2D_SetSourceRect(objc, 0, 0, 7, 7);
	ObjSprite2D_SetDestCenter(objc);
	Obj_SetRenderPriority(objc, 0.79);
	let t = 0;
	loop {
		ObjRender_SetPosition(obj, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetPosition(objc, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetAngleXYZ(obj, 0, 0, t);
		let showHitbox = isFocused && (GetPlayerState == STATE_NORMAL);
		Obj_SetVisible(obj, showHitbox);
		Obj_SetVisible(objc, showHitbox);
		t += 3;
		yield;
	}
}

function createItemU1(type, x, y) {
	let i = CreateItemU1(type, x, y, 0);
	ObjItem_SetRenderScoreEnable(i, false);
	return i;
}

function isFocused {
	return GetVirtualKeyState(VK_SLOWMOVE) != KEY_FREE;
}

// Causes the shot to home.
task home(shot) {
	while (!Obj_IsDeleted(shot)) {
		let enemy = nearestEnemy(shot);
		if (enemy != ID_INVALID) {
			let angle = getAngleTo(shot, enemy);
			let old = ObjMove_GetAngle(shot);
			let diff = (angle - old + 360) % 360;
			if (diff < 180) {ObjMove_SetAngle(shot, old + 2);}
			if (diff > 180) {ObjMove_SetAngle(shot, old - 2);}
		}
		yield;
	}
}

task homeToPlayer(shot) {
	while (!Obj_IsDeleted(shot)) {
		let angle = GetAngleToPlayer(shot);
		let old = ObjMove_GetAngle(shot);
		let diff = (angle - old + 360) % 360;
		if (diff < 180) {ObjMove_SetAngle(shot, old + 2);}
		if (diff > 180) {ObjMove_SetAngle(shot, old - 2);}
		yield;
	}
}

task homeToPlayerS(shot, speed) {
	while (!Obj_IsDeleted(shot)) {
		let angle = GetAngleToPlayer(shot);
		let old = ObjMove_GetAngle(shot);
		let diff = (angle - old + 360) % 360;
		if (diff < 180) {ObjMove_SetAngle(shot, old + speed);}
		if (diff > 180) {ObjMove_SetAngle(shot, old - speed);}
		yield;
	}
}

task homeToPlayerD(shot, delay, interval) {
	while (!Obj_IsDeleted(shot)) {
		let angle = GetAngleToPlayer(shot);
		let old = ObjMove_GetAngle(shot);
		task nudge(amt) {
			wait(delay);
			ObjMove_SetAngle(shot, old + amt);
		}
		let diff = (angle - old + 360) % 360;
		if (diff < 180) {nudge(2 * interval);}
		if (diff > 180) {nudge(-2 * interval);}
		wait(interval);
	}
}

// Returns the ID of the nearest enemy, or ID_INVALID if there are none.
function nearestEnemy(obj) {
	let enemies = GetAllEnemyID;
	let len = length(enemies);
	let nearest = ID_INVALID;
	let distance = 99999;
	ascent (i in 0..len) {
		let enemy = enemies[i];
		let d = GetObjectDistance(obj, enemy);
		if (d < distance) {
			distance = d;
			nearest = enemy;
		}
	}
	return nearest;
}

// Gets the angle from obj1 to obj2.
function getAngleTo(obj1, obj2) {
	let x1 = ObjMove_GetX(obj1);
	let x2 = ObjMove_GetX(obj2);
	let y1 = ObjMove_GetY(obj1);
	let y2 = ObjMove_GetY(obj2);
	return atan2(y2 - y1, x2 - x1) % 360;
}

function getAngleToXY(obj1, x2, y2) {
	let x1 = ObjMove_GetX(obj1);
	let y1 = ObjMove_GetY(obj1);
	return atan2(y2 - y1, x2 - x1) % 360;
}

function getAngleTwoPoints(x1, y1, x2, y2) {
	return atan2(y2 - y1, x2 - x1) % 360;
}

function getDistanceTo(obj1, obj2) {
	let x1 = ObjMove_GetX(obj1);
	let x2 = ObjMove_GetX(obj2);
	let y1 = ObjMove_GetY(obj1);
	let y2 = ObjMove_GetY(obj2);
	return ((x2 - x1) ^ 2 + (y2 - y1) ^ 2) ^ 0.5;
}

function getDistanceToXY(obj1, x2, y2) {
	let x1 = ObjMove_GetX(obj1);
	let y1 = ObjMove_GetY(obj1);
	return ((x2 - x1) ^ 2 + (y2 - y1) ^ 2) ^ 0.5;
}

function getDistanceTwoPoints(x1, y1, x2, y2) {
	return ((x2 - x1) ^ 2 + (y2 - y1) ^ 2) ^ 0.5;
}

function getDistanceToPlayer(obj) {
	return getDistanceTo(obj, GetPlayerObjectID);
}

task shake(ticks) {
	if (GetCommonData("ShakeDisabled", false)) {return;}
	loop (ticks) {
		Set2DCameraFocusX(GetStgFrameWidth / 2 + rand(-8, 8));
		Set2DCameraFocusY(GetStgFrameHeight / 2 + rand(-8, 8));
		yield;
	}
	Reset2DCamera;
}

function getRank {
	return GetCommonData("Rank", getDifficulty);
}

task setRank(d) {
	SetCommonData("Rank", d);
}

function getStartRank {
	return GetCommonData("StartRank", getDifficulty);
}

task setStartRank(d) {
	SetCommonData("StartRank", d);
}

function getMinRank {
	return 0.7 * (getDifficulty + 1) - 1;
}

task addRank(r) {
	let n = getRank + r;
	let s = getStartRank;
	n = min(s + 0.5, n);
	setRank(n);
}

// Code thanks to Sparen (with some formatting changes)
task delayLaser(x, y, ang, l, w, dt, graph, delay) { 
	let objlaser = CreateStraightLaserA1(x, y, ang, l, w, dt, graph, delay);
	ObjStLaser_SetSource(objlaser, false);
	loop (delay - 1) {//So that the graphic never enlarges. 
	  // Default kill to prevent (0, 0) spawning
	  //if (ObjEnemy_GetInfo(GetEnemyBossObjectID, INFO_LIFE) <= 0) {Obj_Delete(objlaser); return;}
	  yield;
	}
	Obj_Delete(objlaser);
}

function getInvincibility {
	return GetCommonData("Invincibility", 0);
}